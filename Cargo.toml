[package]
name = "imgly-bgremove"
version = "0.2.0"
edition = "2021"
authors = ["IMG.LY Rust Team <rust@img.ly>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/imgly/background-removal-rust"
homepage = "https://img.ly"
keywords = ["background-removal", "image-processing", "computer-vision", "onnx", "segmentation"]
categories = ["multimedia::images", "computer-vision", "science"]
rust-version = "1.70"
description = "Consolidated background removal library with ONNX and Tract backends"

[[bin]]
name = "imgly-bgremove"
path = "src/bin/imgly-bgremove.rs"

[features]
# Default: include all backends and CLI functionality (removed embedded models)
default = ["onnx", "tract", "cli", "webp-support"]

# Backend features
onnx = ["dep:ort"]
tract = ["dep:tract-onnx", "dep:tract-core"]

# CLI functionality with download capabilities
cli = ["dep:clap", "dep:indicatif", "dep:env_logger", "dep:glob", "dep:walkdir", "dep:reqwest", "dep:dirs", "dep:tokio-util", "dep:sha2", "dep:futures-util"]

# WebP support (pure Rust, WASM-compatible via image crate)
webp-support = ["image/webp"]

# Model embedding features removed - use download functionality instead

[dependencies]
# Core dependencies
image = { version = "0.25.6", features = ["png", "jpeg", "tiff"], default-features = false }
ndarray = "0.16"
anyhow = "1.0"
thiserror = "1.0"

# Async runtime
tokio = { version = "1.0", features = ["full"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Logging
log = "0.4"
chrono = { version = "0.4", features = ["serde"] }

# WASM-compatible time
instant = { version = "0.1", features = ["wasm-bindgen"] }

# ONNX backend dependencies (feature-gated)
ort = { version = "2.0.0-rc.10", features = ["coreml"], optional = true }

# Tract backend dependencies (feature-gated)
tract-onnx = { version = "0.21", optional = true }
tract-core = { version = "0.21", optional = true }

# CLI dependencies (feature-gated)
clap = { version = "4.0", features = ["derive"], optional = true }
indicatif = { version = "0.17", optional = true }
env_logger = { version = "0.11", optional = true }
glob = { version = "0.3", optional = true }
walkdir = { version = "2.0", optional = true }

# Model download dependencies (feature-gated with CLI)
reqwest = { version = "0.11", features = ["rustls-tls", "stream"], optional = true }
dirs = { version = "5.0", optional = true }
tokio-util = { version = "0.7", features = ["io"], optional = true }
sha2 = { version = "0.10", optional = true }
futures-util = { version = "0.3", optional = true }

[dev-dependencies]
criterion = "0.5"
tempfile = "3.0"
tokio = { version = "1.0", features = ["test-util"] }
env_logger = "0.11"
uuid = { version = "1.0", features = ["v4"] }

[build-dependencies]
serde_json = "1.0"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 1
debug = true

# Linting configuration for zero-warning policy
[lints.rust]
warnings = "deny"
unsafe_code = "warn"
unreachable_pub = "warn"
unused_qualifications = "warn"
missing_docs = "allow"
missing_debug_implementations = "allow"

[lints.clippy]
pedantic = { level = "warn", priority = -1 }
indexing_slicing = "warn"
unimplemented = "warn"
todo = "warn"
inefficient_to_string = "warn"
large_types_passed_by_value = "warn"
module_name_repetitions = "allow"
similar_names = "allow"
cast_precision_loss = "allow"
cast_possible_truncation = "allow"
cast_sign_loss = "allow"
unwrap_used = "allow"
expect_used = "allow"
panic = "allow"