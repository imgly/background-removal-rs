[package]
name = "imgly-bgremove"
version = "0.2.0"
edition = "2021"
authors = ["IMG.LY Rust Team <rust@img.ly>"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/imgly/background-removal-rs"
homepage = "https://img.ly"
keywords = ["background-removal", "image-processing", "computer-vision", "onnx", "segmentation"]
categories = ["multimedia::images", "computer-vision", "science"]
rust-version = "1.70"
description = "Consolidated background removal library with ONNX and Tract backends"

[[bin]]
name = "imgly-bgremove"
path = "src/bin/imgly-bgremove.rs"

[features]
# Default: include all backends and CLI functionality
default = ["onnx", "tract", "cli", "webp-support", "video-support"]

# Backend features
onnx = ["dep:ort"]
tract = ["dep:tract-onnx", "dep:tract-core"]

# Video processing support
video-support = ["dep:ffmpeg-next"]

# CLI functionality (UI-specific features only)
cli = ["dep:clap", "dep:indicatif", "dep:tracing-subscriber", "dep:uuid", "dep:glob", "dep:walkdir"]

# Tracing output formats (optional)
tracing-json = ["tracing-subscriber/json"]
tracing-files = ["dep:tracing-appender"]
tracing-otel = ["dep:tracing-opentelemetry"]

# WebP support (pure Rust via image crate)
webp-support = ["image/webp"]

# Model embedding features removed - use download functionality instead

[dependencies]
# Core dependencies
image = { version = "0.25.6", features = ["png", "jpeg", "tiff"], default-features = false }
ndarray = "0.16"
anyhow = "1.0"
thiserror = "1.0"

# Async runtime
tokio = { version = "1.0", features = ["full"] }
async-trait = "0.1"
futures = "0.3"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Logging and Tracing
log = "0.4"  # Keep for backward compatibility
tracing = "0.1"
chrono = { version = "0.4", features = ["serde"] }

# Cross-platform time
instant = "0.1"

# ONNX backend dependencies (feature-gated)
ort = { version = "2.0.0-rc.10", features = ["coreml", "cuda"], optional = true }

# Tract backend dependencies (feature-gated)
tract-onnx = { version = "0.21", optional = true }
tract-core = { version = "0.21", optional = true }

# CLI dependencies (feature-gated)
clap = { version = "4.0", features = ["derive"], optional = true }
indicatif = { version = "0.17", optional = true }
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt"], optional = true }
uuid = { version = "1.0", features = ["v4"], optional = true }
glob = { version = "0.3", optional = true }
walkdir = { version = "2.0", optional = true }

# Advanced tracing features (optional)
tracing-appender = { version = "0.2", optional = true }
tracing-opentelemetry = { version = "0.22", optional = true }

# Video processing dependencies (feature-gated)
ffmpeg-next = { version = "7.1", optional = true }

# Model download and caching dependencies (always available)
reqwest = { version = "0.11", features = ["rustls-tls", "stream"] }
dirs = { version = "5.0" }
tokio-util = { version = "0.7", features = ["io"] }
sha2 = { version = "0.10" }
futures-util = { version = "0.3" }

# Temporary file handling (for video processing)
tempfile = "3.0"

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
tempfile = "3.0"
tokio = { version = "1.0", features = ["test-util"] }
env_logger = "0.11"
uuid = { version = "1.0", features = ["v4"] }
dirs = "5.0"

[build-dependencies]
serde_json = "1.0"

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 1
debug = true

# Linting configuration for zero-warning policy
[lints.rust]
warnings = "deny"
unsafe_code = "warn"
unreachable_pub = "warn"
unused_qualifications = "warn"
missing_docs = "allow"
missing_debug_implementations = "allow"

[lints.clippy]
pedantic = { level = "warn", priority = -1 }
indexing_slicing = "warn"
unimplemented = "warn"
todo = "warn"
inefficient_to_string = "warn"
large_types_passed_by_value = "warn"
module_name_repetitions = "allow"
similar_names = "allow"
cast_precision_loss = "allow"
cast_possible_truncation = "allow"
cast_sign_loss = "allow"
unwrap_used = "allow"
expect_used = "allow"
panic = "allow"

[[bench]]
name = "provider_benchmarks"
harness = false

[[bench]]
name = "cache_benchmarks"
harness = false

[[bench]]
name = "cache_verification"
harness = false