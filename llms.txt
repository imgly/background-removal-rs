# LLM Context File for bg_remove-rs
# Format: filepath : one-line summary

# Core Configuration
/Cargo.toml : Workspace configuration defining all dependencies, features, and build settings
/build.rs : Build script for model preparation and compilation configuration
/rustfmt.toml : Rust code formatting configuration for consistent style
/.claude/settings.json : Claude AI assistant global configuration settings
/.claude/settings.local.json : Local Claude settings overrides for personalized behavior
/.mcp.json : Model Context Protocol configuration for AI tool integration
/.vscode/settings.json : VSCode workspace settings for IDE configuration

# Documentation
/README.md : Main project documentation with features, installation, and usage instructions
/CLAUDE.md : Claude AI assistant configuration and project-specific rules
/CHANGELOG.md : Workspace-level changelog for tracking releases and changes
/bin/README.md : Documentation for build and utility scripts
/machines/README.md : Cross-compilation and Docker machine configuration documentation
/tests/assets/README.md : Test assets and fixtures documentation
/benches/README.md : Benchmark suite documentation and usage instructions
/docs/RELEASE_WORKFLOW.md : Comprehensive guide for release management using cargo-smart-release

# Implementation Plans
/docs/feat/2025-01-30_api-refactor/implementation_plan.md : API refactoring implementation plan
/docs/feat/2025-06-28_benchmarks/implementation_plan.md : Benchmark infrastructure implementation plan
/docs/feat/2025-06-29_cli-feature-refactor/implementation_plan.md : CLI feature refactoring plan
/docs/feat/20250627_cache_management/implementation_plan.md : Cache management system implementation plan
/docs/feat/20250627_model_download/implementation_plan.md : Model download functionality implementation plan
/docs/feat/20250627203342_package_consolidation/implementation_plan.md : Package consolidation implementation plan
/docs/feat/20250629_185954_tracing_integration/implementation_plan.md : Tracing integration implementation plan
/docs/feat/20250701_simplify_backend/implementation_plan.md : Backend simplification implementation plan
/docs/feat/20250701214946_increase_test_coverage/implementation_plan.md : Test coverage improvement implementation plan
/docs/feat/$(date +%Y%m%d%H%M%S)_increase_test_coverage/implementation_plan.md : Generated test coverage implementation plan

# Main Library
/src/lib.rs : Main library entry point exposing public API for background removal
/src/config.rs : Configuration structs for removal settings and model parameters
/src/error.rs : Error types and error handling infrastructure
/src/inference.rs : Neural network inference backend trait and implementations
/src/models.rs : Model definitions and loading logic for ISNet and BiRefNet
/src/processor.rs : Main background removal processor orchestrating the pipeline
/src/types.rs : Core type definitions and data structures used throughout the library
/src/cache.rs : Model caching system for performance optimization
/src/download.rs : Model downloading and management functionality
/src/color_profile.rs : ICC color profile handling for preserving image color accuracy
/src/session_cache.rs : Session-based caching for efficient multi-image processing
/src/tracing_config.rs : Tracing and logging configuration for observability

# Backend Implementations
/src/backends/mod.rs : Backend module exports and trait definitions
/src/backends/onnx.rs : ONNX Runtime inference backend with hardware acceleration
/src/backends/tract.rs : Tract pure-Rust inference backend for CPU deployment
/src/backends/test_utils.rs : Mock backends and testing utilities for inference testing

# Services Layer
/src/services/mod.rs : Service module exports for IO, formatting, and progress
/src/services/format.rs : Image format detection and conversion services
/src/services/io.rs : File and stream I/O services for image data
/src/services/progress.rs : Progress reporting interface for long operations

# Utilities
/src/utils/mod.rs : Utility module exports for various helper functions
/src/utils/color.rs : Color conversion utilities for image processing
/src/utils/models.rs : Model file management and caching utilities
/src/utils/preprocessing.rs : Image preprocessing for neural network input
/src/utils/providers.rs : Execution provider detection and selection utilities
/src/utils/validation/mod.rs : Validation module exports
/src/utils/validation/config.rs : Configuration validation logic
/src/utils/validation/model.rs : Model file and structure validation
/src/utils/validation/numeric.rs : Numeric parameter validation
/src/utils/validation/path.rs : File path validation utilities
/src/utils/validation/tensor.rs : Tensor shape and data validation

# CLI Application
/src/cli/mod.rs : CLI module organization and exports
/src/cli/main.rs : CLI implementation with argument parsing and processing logic
/src/cli/config.rs : CLI configuration builder mapping arguments to core config
/src/cli/backend_factory.rs : Factory for creating inference backends based on CLI args
/src/bin/imgly-bgremove.rs : CLI binary entry point

# API Layer
/src/api/mod.rs : Public API module exports and organization
/src/api/config.rs : API configuration types and builders
/src/api/progress.rs : Progress reporting API for client applications

# Testing Infrastructure
/tests/lib.rs : Test library with shared utilities and common functionality
/tests/common.rs : Common test utilities and helper functions
/tests/fixtures.rs : Test fixture management and loading utilities
/tests/comparison.rs : Image comparison utilities for testing accuracy
/tests/report.rs : Test report generation with visual comparisons
/tests/color_profile_integration.rs : Color profile preservation integration tests
/tests/error_handling_edge_cases.rs : Edge case error handling tests
/tests/integration_workflows.rs : End-to-end workflow integration tests
/tests/assets/test_cases.json : Test case definitions and metadata

# Test Binaries
/tests/bin/generate-report.rs : Report generation binary for test results
/tests/bin/test-color-profile.rs : Color profile testing utility

# Benchmarks
/benches/cache_benchmarks.rs : Cache system performance benchmarks
/benches/cache_verification.rs : Cache correctness and verification benchmarks
/benches/provider_benchmarks.rs : Execution provider performance comparisons

# Examples
/examples/library_usage.rs : Comprehensive library usage examples
/examples/minimal_usage.rs : Minimal usage examples for quick start
/examples/one_liner.rs : Single-line usage examples for simplicity
/examples/stream_usage.rs : Stream-based processing examples
/examples/ultra_simple.rs : Ultra-simplified usage examples

# Build Scripts
/build-cross.sh : Cross-compilation script for multiple target architectures
/bin/format.sh : Code formatting script using rustfmt
/bin/lint.sh : Linting script using clippy with strict rules
/bin/pre-commit-hook.sh : Git pre-commit hook for code quality checks
/scripts/claude.sandbox.sh : Claude AI sandbox environment setup script

# CI/CD Configuration
/.github/workflows/ci.yml : GitHub Actions CI/CD workflow for testing and building

# Claude AI Configuration
/.claude/commands/code_review.md : Code review command template for systematic reviews
/.claude/commands/generate_dadjoke.md : Dad joke generation command for levity
/.claude/commands/implement_plan.md : Implementation planning command template
/.claude/commands/review_developer_docs.md : Developer documentation review command
/.claude/commands/review_guides.md : Guide review command template
/.claude/experts/sonnet-v4.md : Sonnet v4 expert configuration and capabilities

# Development Rules
/.claude/rules/mandatory_worktree_usage.md : Critical rule enforcing git worktree usage for all development
/.claude/rules/task_management.md : Task management rules and guidelines for Claude
/.claude/rules/implementation_planning.md : Implementation planning and worktree creation rules
/.claude/rules/process_execution.md : Process execution requirements and standards
/.claude/rules/kiss_principle.md : Keep It Simple principle enforcement
/.claude/rules/yagni_principle.md : You Aren't Gonna Need It principle guidelines
/.claude/rules/code_quality.md : Code quality standards and requirements
/.claude/rules/solid_principles.md : SOLID principles enforcement and guidelines
/.claude/rules/commit_guidelines.md : Git commit message conventions and standards
/.claude/rules/documentation_protocols.md : Documentation standards and requirements
/.claude/rules/changelog_update.md : Rules for maintaining changelog files during development
/.claude/rules/git_workflow.md : Git workflow and branching strategy requirements
/.claude/rules/cargo_check_after_changes.md : Cargo check requirement after Rust changes
/.claude/rules/cargo_fmt_after_changes.md : Cargo format requirement after Rust changes
/.claude/rules/cargo_test_after_completion.md : Cargo test requirement after task completion
/.claude/rules/feature_finalization_testing.md : Comprehensive testing requirements for feature completion
/.claude/rules/mandatory_doc_test_execution.md : Critical rule enforcing doc test execution in all testing workflows
/.claude/rules/conversational_interaction.md : User interaction guidelines and standards
/.claude/rules/thinking_and_tool_use.md : Tool usage reflection requirements
/.claude/rules/prompt_for_tool_triggering-websearch.md : Web search tool triggering rules
/.claude/rules/parallel_tool_calling.md : Parallel tool execution optimization guidelines
/.claude/rules/tool_use_playwright_mcp.md : Playwright MCP tool usage guidelines
/.claude/rules/maintain_llms_txt.md : Rules for maintaining and updating the llms.txt file
/.claude/rules/repository_structure_reference.md : Rule explaining llms.txt as the primary repository structure reference