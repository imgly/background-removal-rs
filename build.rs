//! Build script for generating minimal model configuration
//! No embedded models - use download functionality for HuggingFace models

fn main() {
    let out_dir = std::env::var("OUT_DIR").expect("OUT_DIR environment variable not set");
    let dest_path = std::path::Path::new(&out_dir).join("model_config.rs");

    // Generate minimal configuration - no embedded models
    let generated_code = r"
// Generated by build.rs - do not edit manually
// Use model downloading functionality for HuggingFace models

#[derive(Debug, Clone)]
pub struct PreprocessingConfig {
    pub target_size: [u32; 2],
    pub normalization_mean: [f32; 3],
    pub normalization_std: [f32; 3],
}

pub struct EmbeddedModelRegistry;

impl EmbeddedModelRegistry {
    #[must_use] pub fn get_model(_name: &str) -> Option<()> {
        None // No embedded models - use download functionality
    }
    
    #[must_use] pub fn list_available() -> &'static [&'static str] {
        &[] // Empty list - use download functionality
    }
}
";
    std::fs::write(&dest_path, generated_code).expect("Failed to write generated code");
}
