//! Build script for generating empty embedded model registry
//! Embedded models have been removed - use download functionality instead

#![allow(missing_docs)]

use std::env;
use std::fs;
use std::path::Path;

fn main() {
    let out_dir = env::var("OUT_DIR").expect("OUT_DIR environment variable not set");
    let dest_path = Path::new(&out_dir).join("model_config.rs");

    // Generate empty registry - no embedded models supported
    let generated_code = r"
// Generated by build.rs - do not edit manually
// Embedded models have been removed - use download functionality instead

#[derive(Debug, Clone)]
pub struct EmbeddedModelData {
    pub name: String,
    pub model_data: Vec<u8>,
    pub input_name: String,
    pub output_name: String,
    pub input_shape: [usize; 4],
    pub output_shape: [usize; 4],
    pub preprocessing: PreprocessingConfig,
}

#[derive(Debug, Clone)]
pub struct PreprocessingConfig {
    pub target_size: [u32; 2],
    pub normalization_mean: [f32; 3],
    pub normalization_std: [f32; 3],
}

pub struct EmbeddedModelRegistry;

impl EmbeddedModelRegistry {
    #[must_use] pub fn get_model(_name: &str) -> Option<EmbeddedModelData> {
        None // No embedded models - use download functionality
    }
    
    #[must_use] pub fn list_available() -> &'static [&'static str] {
        &[] // Empty list - use download functionality
    }
}
";
    fs::write(&dest_path, generated_code).expect("Failed to write generated code");
}
